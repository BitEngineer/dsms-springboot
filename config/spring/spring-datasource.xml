<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- DataSource，使用数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${dataSource.driverClassName}"  />
		<property name="url" value="${dataSource.url}"  />
		<property name="username" value="${dataSource.username}" />
		<property name="password" value="${dataSource.password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${dataSource.initialSize}"></property>
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${dataSource.maxActive}" ></property>
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${dataSource.maxIdle}"></property>
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${dataSource.minIdle}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${dataSource.maxWait}"></property>
		<!-- 获取连接最大等待时间 -->
		<property name="testOnBorrow" value="${dataSource.testOnBorrow}"></property>
		<property name="validationQuery" value="${dataSource.validationQuery}"></property>
	</bean>

	<!-- spring和MyBatis整合 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath*:mybatis/**/*.xml"></property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lonton.**.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
	<!-- 事务管理器 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <description>事务管理器</description>
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 使用AOP方式进行基于Annotation的事务管理 -->
    <tx:annotation-driven mode="proxy" transaction-manager="txManager" proxy-target-class="true"/>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<!--  
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	-->

	<!-- 事务切片，定义在服务层 -->
	<!--  
	<aop:config>
		<aop:pointcut id="pointcut"
			expression="execution(* com.lonton.dsms.web..*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointcut" />
	</aop:config>
	-->
	
	<!-- 定义切片方法、事务隔离级别、事务传播方式、回滚事件 -->
	<!--  
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="edit*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="del*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="save*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="update*" propagation="REQUIRED" isolation="READ_COMMITTED"
				rollback-for="java.lang.Throwable" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	-->
	
</beans>