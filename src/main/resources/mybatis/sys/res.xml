<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dengjian.gomars.sys.mapper.ResMapper" >
	<resultMap id="BaseResultMap" type="hashMap" >
		<result property="resId" column="res_id" jdbcType="VARCHAR" />
		<result property="resCode" column="res_code" jdbcType="VARCHAR" />
		<result property="resName" column="res_name" jdbcType="VARCHAR" />
		<result property="resType" column="res_type" jdbcType="VARCHAR" />
		<result property="resUrl" column="res_url" jdbcType="VARCHAR"/>
		<result property="relative" column="relative" jdbcType="VARCHAR"/>
		<result property="parentId" column="parent_id" jdbcType="VARCHAR" />
		<result property="treePath" column="tree_path" jdbcType="VARCHAR" />
		<result property="resOrder" column="res_order" jdbcType="INTEGER" />
		<result property="resIcon" column="res_icon" jdbcType="VARCHAR" />
		<result property="available" column="AVAILABLE" jdbcType="VARCHAR" />
		<result property="visible" column="visible" jdbcType="VARCHAR" />
		<result property="updateUser" column="update_user" jdbcType="VARCHAR" />
		<result property="updateTime" column="update_time" jdbcType="TIMESTAMP" javaType="java.sql.Date"/>
	</resultMap>
	
	<resultMap id="urlMap" type="hashMap" >
		<result property="urlId" column="url_Id" jdbcType="VARCHAR" />
		<result property="urlPath" column="url_path" jdbcType="VARCHAR" />
		<result property="description" column="description" jdbcType="VARCHAR" />
	</resultMap>
	
	<resultMap id="roleMap" type="hashMap" >
		<result property="roleId" column="role_id" jdbcType="VARCHAR" />
		<result property="roleName" column="role_name" jdbcType="VARCHAR" />
		<result property="description" column="description" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="TABLE_NAME" >
		A_RES
	</sql>
	
	<sql id="TABLE_URL_NAME" >
		A_URL
	</sql>
	
	<sql id="TABLE_RES_URL_NAME" >
		A_RES_URL
	</sql>
	
	<sql id="TABLE_RES_ROLE_NAME" >
		A_ARCGRANT
	</sql>
	
	<sql id="Base_Column_List" >
		RES_CODE, RES_NAME, RES_TYPE, RES_URL, RELATIVE, PARENT_ID, TREE_PATH, RES_ORDER, RES_ICON, AVAILABLE, VISIBLE, UPDATE_USER, UPDATE_TIME
	</sql>

  	<select id="select" resultMap="BaseResultMap" parameterType="hashMap">
		select
			 RES_ID,<include refid="Base_Column_List" />
  		from
  			<include refid="TABLE_NAME" />
  		where
  			1=1
  			<if test="resId != null and resId != ''">
  				and res_id = #{resId}
  			</if>
  			<if test="resCode != null and resCode != ''">
  				and res_code = #{resCode}
  			</if>
  			<if test="resName != null and resName != ''">
  				and res_name like concat(#{resName}, '%')
  			</if>
  			<if test="resType != null and resType != ''">
				and res_type = #{resType}
			</if>
			<if test="parentId != null and parentId != ''">
				and parent_id = #{parentId} 
			</if>
		order by tree_path, res_order
  	</select>   

  	<insert id="insert" parameterType="hashMap" >
  		insert into 
	  		<include refid="TABLE_NAME" />	
  			( RES_ID, <include refid="Base_Column_List" />) 
  		values(
  			#{resId,jdbcType=VARCHAR}, #{resCode, jdbcType=VARCHAR}, #{resName, jdbcType=VARCHAR}, 
  			#{resType, jdbcType=VARCHAR}, #{resUrl, jdbcType=VARCHAR}, 
			#{relative, jdbcType=VARCHAR}, #{parentId, jdbcType=VARCHAR},
			#{treePath, jdbcType=VARCHAR}, #{resOrder, jdbcType=VARCHAR},
			#{resIcon, jdbcType=VARCHAR}, #{available, jdbcType=VARCHAR},
			#{visible, jdbcType=VARCHAR},
			#{updateUser, jdbcType=VARCHAR}, CURRENT_TIMESTAMP
  		)
  	</insert>
  	
  	<update id="update" parameterType="hashMap">
  		update
  			<include refid="TABLE_NAME" />
	  	set
	  		<if test="resName != null and resName != ''">
  				res_name = #{resName, jdbcType=VARCHAR},
  			</if>
  			<if test="resCode != null and resCode != ''">
  				res_code = #{resCode, jdbcType=VARCHAR},
  			</if>
  			<if test="resType != null and resType != ''">
  				res_type = #{resType, jdbcType=VARCHAR},
  			</if>
  			<if test="resUrl != null and resUrl != ''">
  				res_url = #{resUrl, jdbcType=VARCHAR},
  			</if>
  			<if test="relative != null and relative != ''">
  				relative = #{relative, jdbcType=VARCHAR},
  			</if>
  			<if test="parentId != null and parentId  != ''">
  				parent_id = #{parentId, jdbcType=VARCHAR},
  			</if>
  			<if test="treePath != null and treePath != ''">
  				tree_path = #{treePath, jdbcType=VARCHAR},
  			</if>
  			<if test="resOrder != null and resOrder  != ''">
  				res_order = #{resOrder, jdbcType=INTEGER},
  			</if>
  			<if test="resIcon != null and resIcon != ''">
  				res_icon = #{resIcon, jdbcType=VARCHAR},
  			</if>
  			<if test="available != null and available  != ''">
  				available = #{available, jdbcType=VARCHAR},
  			</if>
  			<if test="visible != null and visible != ''">
  				visible = #{visible, jdbcType=VARCHAR},
  			</if>
  			<if test="updateUser != null and updateUser != ''">
  				update_user = #{updateUser, jdbcType=VARCHAR},
  			</if>
			update_time = CURRENT_TIMESTAMP
  		where
  		RES_ID = #{resId, jdbcType=VARCHAR}
  	</update>
  	
  	<delete id="delete" parameterType="hashMap">
  		delete from 
  			<include refid="TABLE_NAME" />
  		where
		RES_ID = #{resId, jdbcType=VARCHAR}
  	</delete>
  	
  	<select id="selectResUrl" parameterType="hashmap" resultMap="urlMap">
  		select 
  			u.*
  		from 
  			a_url u, a_res_url ru 
  		where 
  			u.url_id = ru.url_id
  			and ru.res_id = #{resId, jdbcType=VARCHAR}
  	</select>
  	
  	<select id="selectAllUrl" parameterType="hashmap" resultMap="urlMap">
  		select * from (
  		select * from (
  		select t.*, rownum N from (
	  		select 	u.* from a_url u
	  		minus
	  		select u.*  from 
	  			a_url u, a_res_url ru 
	  		where 
	  			u.url_id = ru.url_id
	  			<if test="resId != null and resId != ''">
	  				and ru.res_id = #{resId}
	  			</if>
	  			<if test="urlPath != null and urlPath != ''">
	  				and u.url_path like concat(#{urlPath}, '%')
	  			</if>
 		) t	) t
	  	<![CDATA[
	  		where t.N <= ${end}
	  		) t where t.N >= ${start}
		]]>
  	</select>
  	
  	<!-- 批量删除 -->
  	<delete id="clearResUrl" parameterType="string">
		delete from
			<include refid="TABLE_RES_URL_NAME" />
		where
			res_id = #{resId, jdbcType=VARCHAR}
	</delete>
	
	<!-- 批量插入 -->
	<insert id="insertResUrl" parameterType="hashmap">
  		insert all
  		<foreach collection="urlIds" item="item" >
  			into
	  			<include refid="TABLE_RES_URL_NAME" />
	  			(PK_ID, RES_ID, URL_ID, UPDATE_USER, UPDATE_TIME)
		  	values 
	            (sys_guid(), #{resId, jdbcType=VARCHAR}, #{item, jdbcType=VARCHAR}, #{updateUser, jdbcType=VARCHAR}, current_timestamp)
        </foreach>
        select 1 from dual
  	</insert>
	
 	<select id="selectResRole" parameterType="hashmap" resultMap="roleMap">
  		select 
  			r.*
  		from 
  			a_role r, a_arcgrant a
  		where 
  			r.role_id = a.role_id
  			and r.delete_flag = '1'
  			and a.res_id = #{resId, jdbcType=VARCHAR}
  	</select>
  	
  	<select id="selectAllRole" parameterType="hashmap" resultMap="roleMap">
  		select * from (
  		select * from (
	  		select t.*, rownum N from (
	  		select r.* from a_role r where r.delete_flag = '1'
	  		minus
	  		select r.* from 
	  			a_role r, a_arcgrant a
	  		where 
	  			r.role_id = a.role_id
	  			<if test="resId != null and resId != ''">
	  				and a.res_id = #{resId}
	  			</if>
	  			<if test="roleName != null and roleName != ''">
	  				and r.role_name like concat(#{roleName}, '%')
	  			</if>
	  	) t	) t
	  	<![CDATA[
	  		where t.N <= ${end}
	  		) t where t.N >= ${start}
		]]>
  	</select>
  	
	<delete id="clearResRole" parameterType="string">
		delete from
			<include refid="TABLE_RES_ROLE_NAME" />
		where
			res_id = #{resId, jdbcType=VARCHAR}
	</delete>
	
	<!-- 批量插入 -->
	<insert id="insertResRole" parameterType="hashmap">
  		insert all
  		<foreach collection="roleIds" item="item">
	  		into
		  			<include refid="TABLE_RES_ROLE_NAME" />
	  			(PK_ID, RES_ID, ROLE_ID, UPDATE_USER, UPDATE_TIME, DELETE_FLAG, EFFECT_TIME, EXPIRY_TIME)
		  	values 
	            (sys_guid(), #{resId, jdbcType=VARCHAR}, #{item, jdbcType=VARCHAR}, #{updateUser, jdbcType=VARCHAR}, current_timestamp, '1', TO_DATE('2000', 'YYYY'), TO_DATE('2099', 'YYYY'))
        </foreach>
        select 1 from dual
  	</insert>
	
</mapper>