<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.dengjian.gomars.sys.mapper.CodeinfoMapper" >
	<resultMap id="BaseResultMap" type="hashMap" >
		<result property="codeinfoId" column="CODEINFO_ID" jdbcType="VARCHAR" />
		<result property="codeinfoCode" column="CODEINFO_CODE" jdbcType="VARCHAR" />
		<result property="codeinfoValue" column="CODEINFO_VALUE" jdbcType="VARCHAR" />
		<result property="codetypeId" column="CODETYPE_ID" jdbcType="VARCHAR" />
		<result property="codetypeCode" column="CODETYPE_Code" jdbcType="VARCHAR" />
		<result property="codetypeName" column="CODETYPE_Name" jdbcType="VARCHAR" />
		<result property="description" column="DESCRIPTION" jdbcType="VARCHAR"/>
		<result property="orderNo" column="ORDER_NO" jdbcType="INTEGER"/>
		<result property="rootId" column="ROOT_ID" jdbcType="VARCHAR" />
		<result property="parentId" column="PARENT_ID" jdbcType="VARCHAR" />
		<result property="rootCode" column="ROOT_CODE" jdbcType="VARCHAR" />
		<result property="parentCode" column="PARENT_CODE" jdbcType="VARCHAR" />
		<result property="codeLevel" column="CODE_LEVEL" jdbcType="INTEGER" />
		<result property="treePath" column="TREE_PATH" jdbcType="VARCHAR" />
		<result property="visible" column="VISIBLE" jdbcType="VARCHAR" />
		<result property="deleteFlag" column="delete_flag" jdbcType="VARCHAR" />
		<result property="updateUser" column="update_user" jdbcType="VARCHAR" />
		<result property="updateTime" column="update_time" jdbcType="TIMESTAMP" javaType="java.sql.Date"/>
	</resultMap>
	<sql id="TABLE_NAME" >
		A_CODEINFO
	</sql>
 
	<sql id="Base_Column_List" >
		CODEINFO_CODE, CODEINFO_VALUE, CODETYPE_ID, DESCRIPTION, ORDER_NO, ROOT_ID, PARENT_ID, CODE_LEVEL, TREE_PATH, VISIBLE, DELETE_FLAG, UPDATE_USER, UPDATE_TIME	
	</sql>

	<!--  
  	<select id="select" resultMap="BaseResultMap" parameterType="hashMap">
  		select * from (
  		select
  			*
  		from (
  			select
	  			c.CODEINFO_ID,
				c.CODEINFO_CODE,
				c.CODEINFO_VALUE,
				c.CODETYPE_ID,
				c.DESCRIPTION,
				c.ORDER_NO,
				c.ROOT_ID,
				c.PARENT_ID,
				c.CODE_LEVEL,
				c.TREE_PATH,
				c.VISIBLE,
				c.DELETE_FLAG,
				c.UPDATE_TIME ,
				s.staff_name as update_user,
				t.codetype_code, t.codetype_name,
				(select codeinfo_code from a_codeinfo r where c.root_id = r.codeinfo_id) root_code,
				(select codeinfo_code from a_codeinfo p where c.parent_id = p.codeinfo_id) parent_code,
	  			ROW_NUMBER() OVER(ORDER BY c.TREE_PATH, c.ORDER_NO) AS N
	  		from
	  			<include refid="TABLE_NAME" /> c, a_staff s, a_codetype t
	  		where
	  			c.update_user = s.staff_id and t.codetype_id = c.codetype_id 
	  			<if test="codeinfoId != null and codeinfoId != ''">
	  				and c.CODEINFO_ID = #{codeinfoId}
	  			</if>
	  			<if test="codeinfoCode != null and codeinfoCode != ''">
	  				and c.CODEINFO_CODE = #{codeinfoCode}
	  			</if>
	  			<if test="codetypeId != null and codetypeId != ''">
	  				and t.CODETYPE_ID = #{codetypeId}
	  			</if>
	  			<if test="codetypeCode != null and codetypeCode != ''">
	  				and t.CODETYPE_code = #{codetypeCode}
	  			</if>
	  			<if test="deleteFlag != null and deleteFlag != ''">
					and c.delete_flag = #{deleteFlag}
				</if>
  		) t
	  	<![CDATA[
	  		where t.N <= ${end}
	  		) t where t.N >= ${start}
		]]>
  	</select>
  	-->
  	
  	<select id="select" resultMap="BaseResultMap" parameterType="hashMap">
  		SELECT
  			c.CODEINFO_ID,
			c.CODEINFO_CODE,
			c.CODEINFO_VALUE,
			c.CODETYPE_ID,
			c.DESCRIPTION,
			c.ORDER_NO,
			c.ROOT_ID,
			c.PARENT_ID,
			c.CODE_LEVEL,
			c.TREE_PATH,
			c.VISIBLE,
			c.DELETE_FLAG,
			c.UPDATE_TIME ,
			s.staff_name as update_user,
			t.codetype_code, t.codetype_name,
			(select codeinfo_code from a_codeinfo r where c.root_id = r.codeinfo_id) root_code,
			(select codeinfo_code from a_codeinfo p where c.parent_id = p.codeinfo_id) parent_code
  		FROM
  			<include refid="TABLE_NAME" /> c, a_staff s, a_codetype t
  		WHERE
  			c.update_user = s.staff_id and t.codetype_id = c.codetype_id 
  			<if test="codeinfoId != null and codeinfoId != ''">
  				and c.CODEINFO_ID = #{codeinfoId}
  			</if>
  			<if test="codeinfoCode != null and codeinfoCode != ''">
  				and c.CODEINFO_CODE = #{codeinfoCode}
  			</if>
  			<if test="codetypeId != null and codetypeId != ''">
  				and t.CODETYPE_ID = #{codetypeId}
  			</if>
  			<if test="codetypeCode != null and codetypeCode != ''">
  				and t.CODETYPE_code = #{codetypeCode}
  			</if>
  			<if test="deleteFlag != null and deleteFlag != ''">
				and c.delete_flag = #{deleteFlag}
			</if>
		LIMIT
			#{start},#{pageSize}
  	</select>
  	
  	<select id="selectCodes" resultMap="BaseResultMap" parameterType="hashMap">
  		select
  			c.CODEINFO_ID,
			c.CODEINFO_CODE,
			c.CODEINFO_VALUE,
			c.CODETYPE_ID,
			c.DESCRIPTION,
			c.ORDER_NO,
			c.ROOT_ID,
			c.PARENT_ID,
			c.CODE_LEVEL,
			c.TREE_PATH,
			c.VISIBLE,
			c.DELETE_FLAG,
			c.UPDATE_TIME ,
			c.update_user,
  			ROW_NUMBER() OVER(ORDER BY c.TREE_PATH, c.ORDER_NO) AS N
  		from
  			<include refid="TABLE_NAME" /> c
  			
  			<if test="codetypeCode != null and codetypeCode != ''">
  				, a_codetype t
  			</if>
  		where
  			c.delete_flag = '1'
  			<if test="codetypeId != null and codetypeId != ''">
  				and c.codetype_id = #{codetypeId}
  			</if>
  			<if test="codetypeCode != null and codetypeCode != ''">
  				and t.codetype_id = c.codetype_id and t.CODETYPE_code = #{codetypeCode}
  			</if>
  	</select>
  	
  	<insert id="insert" parameterType="hashMap" >
  		insert into 
	  			<include refid="TABLE_NAME" />	
  		(CODEINFO_ID,  <include refid="Base_Column_List" />) 
  		values(
  			#{codeinfoId, jdbcType=VARCHAR},
  			#{codeinfoCode, jdbcType=VARCHAR}, #{codeinfoValue, jdbcType=VARCHAR}, 
  			#{codetypeId, jdbcType=VARCHAR}, #{description, jdbcType=VARCHAR}, 
			#{orderNo, jdbcType=INTEGER}, #{rootId, jdbcType=VARCHAR}, #{parentId, jdbcType=VARCHAR}, #{codeLevel, jdbcType=VARCHAR}, 
			#{treePath, jdbcType=VARCHAR}, #{visible, jdbcType=VARCHAR}, 
			#{deleteFlag, jdbcType=VARCHAR},
			#{updateUser, jdbcType=VARCHAR}, CURRENT_TIMESTAMP
  		)
  	</insert>
  	
  	<update id="update" parameterType="hashMap" >
  		update 
  			<include refid="TABLE_NAME" />
	  	set
			UPDATE_USER = #{updateUser, jdbcType=VARCHAR}, UPDATE_TIME = CURRENT_TIMESTAMP
			
			<if test="codeinfoCode != null and codeinfoCode != ''">
  				, CODEINFO_CODE = #{codeinfoCode, jdbcType=VARCHAR}
  			</if>
			<if test="codeinfoValue != null and codeinfoValue != ''">
	  			, CODEINFO_VALUE = #{codeinfoValue, jdbcType=VARCHAR}
  			</if>
			<if test="codetypeId != null and codetypeId != ''">
	  			, CODETYPE_ID = #{codetypeId, jdbcType=VARCHAR}
  			</if>
			<if test="description != null and description != ''">
				, DESCRIPTION = #{description, jdbcType=VARCHAR}
  			</if>
			<if test="orderNo != null and orderNo != ''">
				, ORDER_NO = #{orderNo, jdbcType=INTEGER}
  			</if>
			<if test="rootId != null and rootId != ''">
				, ROOT_ID = #{rootId, jdbcType=VARCHAR}
  			</if>
			<if test="parentId != null and parentId != ''">
				, PARENT_ID = #{parentId, jdbcType=VARCHAR}
  			</if>
			<if test="codeLevel != null and codeLevel != ''">
				, CODE_LEVEL = #{codeLevel, jdbcType=VARCHAR}
  			</if>
			<if test="treePath != null and treePath != ''">
				, TREE_PATH = #{treePath, jdbcType=VARCHAR}
  			</if>
			<if test="visible != null and visible != ''">
				, VISIBLE = #{visible, jdbcType=VARCHAR}
  			</if>
			<if test="deleteFlag != null and deleteFlag != ''">
				, DELETE_FLAG = #{deleteFlag, jdbcType=VARCHAR}
  			</if>
  		where
  		CODEINFO_ID = #{codeinfoId}
  	</update>
  	
  	<update id="updateSubCodeinfo" parameterType="hashMap" >
  		update 
  			<include refid="TABLE_NAME" />
	  	set
	  		root_id = #{rootId},
	  		tree_path = CONCAT(#{newTreePath}, substr(tree_path, length(#{oldTreePath}) + 1)),
	  		code_level = code_level + #{codeLevelChanged, jdbcType=INTEGER}
	  	where 
	  		tree_path like CONCAT(#{oldTreePath}, '|%')
  	</update>
  	
  	<delete id="delete" parameterType="hashMap">
  		delete from 
  			<include refid="TABLE_NAME" />
  		where
  		CODEINFO_ID = #{codeinfoId}
  	</delete>
</mapper>